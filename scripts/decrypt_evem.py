#!/usr/bin/env python
# -*- coding: utf-8 -*-
import zlib
import argparse
import sys

def get_encryption_key():
    return [
        0x28, 0x72, 0x27, 0x45, 0x2f, 0x2d, 0xe5, 0x40, 0xe0, 0x6c, 0xff, 0xaa,
        0x77, 0x5e, 0x23, 0x10, 0x13, 0xc1, 0x94, 0x99, 0x5a, 0xa3, 0x1b, 0x7b,
        0x20, 0x32, 0xeb, 0x0b, 0x6a, 0xc7, 0xa7, 0xd7, 0x0a, 0x35, 0x6e, 0xc0,
        0x3f, 0x4e, 0x7f, 0x1e, 0x03, 0x5b, 0xbb, 0x47, 0xa5, 0x58, 0x54, 0x42,
        0x12, 0x41, 0x29, 0x9e, 0x4d, 0x16, 0x87, 0xa8, 0xbe, 0x4b, 0xb8, 0x9b,
        0xc2, 0xce, 0x7e, 0x96, 0x92, 0xad, 0xc4, 0x70, 0x11, 0xd1, 0x79, 0x8e,
        0x78, 0xb6, 0xdc, 0x76, 0xd2, 0x67, 0xbc, 0x71, 0x4f, 0x5c, 0x81, 0x65,
        0xef, 0xfc, 0x3e, 0x8d, 0x14, 0x37, 0xf2, 0xbf, 0xa0, 0xe2, 0xa2, 0xe6,
        0x56, 0x0e, 0x3a, 0x39, 0x7c, 0x6b, 0xb5, 0xde, 0xf4, 0x09, 0x84, 0x5d,
        0x08, 0xd5, 0x82, 0x57, 0x9a, 0xc9, 0xfb, 0xd4, 0xc8, 0xf8, 0x1c, 0x9f,
        0xab, 0x2a, 0x8b, 0x5f, 0x0c, 0x93, 0x46, 0xf7, 0xd3, 0xfa, 0xa1, 0x9d,
        0x8f, 0xcf, 0xd0, 0xc3, 0x30, 0x17, 0x21, 0xfd, 0x7d, 0x9c, 0x4c, 0x1d,
        0x43, 0xae, 0x8c, 0x2c, 0xe8, 0xf5, 0x44, 0x18, 0x89, 0xa4, 0xf3, 0x85,
        0xbd, 0xdb, 0xb0, 0x64, 0x75, 0xb4, 0x86, 0xb9, 0xb7, 0xd6, 0x91, 0xd9,
        0x6f, 0xe9, 0xf0, 0x0f, 0x04, 0x80, 0xba, 0x31, 0xb3, 0x3c, 0x90, 0xea,
        0xb2, 0xc5, 0xa9, 0xdf, 0x7a, 0xe4, 0x2b, 0x00, 0xf9, 0xd8, 0x02, 0x59,
        0x68, 0x55, 0x2e, 0x48, 0xec, 0xfe, 0xf1, 0xcc, 0xee, 0x74, 0x22, 0x6d,
        0xe7, 0x1f, 0x38, 0xed, 0x1a, 0x3d, 0xe1, 0x95, 0x8a, 0xaf, 0x52, 0x63,
        0xcd, 0x50, 0x73, 0xca, 0xdd, 0x83, 0x0d, 0x51, 0x24, 0x98, 0xac, 0xc6,
        0xf6, 0x06, 0xa6, 0x26, 0x62, 0x69, 0x66, 0xb1, 0x01, 0x4a, 0x34, 0x33,
        0xe3, 0x25, 0x49, 0x15, 0xda, 0xcb, 0x61, 0x05, 0x60, 0x88, 0x19, 0x97,
        0x36, 0x07, 0x53, 0x3b,
    ]

def decrypt(file_data):
    header = file_data[:4]
    is_compressed = file_data[6]
    encrypted = file_data[12:]

    if header != b'EVEM':
        raise ValueError('Invalid header')

    if is_compressed >= 2:
        raise ValueError('Invalid compression flag')

    encryption_key = get_encryption_key()
    decrypted = []

    x = 0
    y = 0
    for i in range(len(encrypted)):
        x = (x + 1) % 256
        y = (encryption_key[x] + y) % 256
        encryption_key[x], encryption_key[y] = encryption_key[y], encryption_key[x]

        decrypted.append(
            encryption_key[(encryption_key[x] + encryption_key[y]) % 256]
            ^ encrypted[i]
        )

    if is_compressed:
        return zlib.decompress(bytes(decrypted))
    else:
        return bytes(decrypted)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='EVEM-encrypted file decrypter')
    parser.add_argument('input', help='filename to read from')
    parser.add_argument('output', nargs='?', help='filename to read to, or stdout if not provided')

    args = parser.parse_args()

    with open(args.input, 'rb') as f:
        input_data = f.read()

    decrypted = decrypt(input_data)

    if args.output:
        with open(args.output, 'wb') as f:
            f.write(decrypted)
    else:
        sys.stdout.buffer.write(decrypted)
